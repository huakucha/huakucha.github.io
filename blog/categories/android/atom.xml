<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | 一骑当千]]></title>
  <link href="https://huakucha.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="https://huakucha.github.io/"/>
  <updated>2017-11-18T15:12:58+08:00</updated>
  <id>https://huakucha.github.io/</id>
  <author>
    <name><![CDATA[花裤衩]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python计算Dex头中的checksum和signature]]></title>
    <link href="https://huakucha.github.io/blog/2017/11/15/pythonji-suan-dextou-zhong-de-checksumhe-signature/"/>
    <updated>2017-11-15T12:33:36+08:00</updated>
    <id>https://huakucha.github.io/blog/2017/11/15/pythonji-suan-dextou-zhong-de-checksumhe-signature</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>本文主要编写修改Android程序DEX头中checksum、signature 和file_size头信息的Python脚本，修改checksum、signature的场景一般出现在加壳以及逆向之后重签名之后对文件完整性进行修改</p>

<!--more-->


<p>我们先看一下文件头记录了dex文件的一些基本信息 :</p>

<pre><code class="python">magic     : dex魔术字, 固定信息: dex\n035
checksum  : alder32算法, 去除了magic和checksum字段之外的所有内容的校验码
signature : sha-1签名, 去除了magic、checksum和signature字段之外的所有内容的签名
fileSize  : 整个dex的文件大小
headerSize: 整个dex文件头的大小 (固定大小为0x70)
endianTag : 字节序 (大尾方式、小尾方式)默认为小尾方式 &lt;--&gt; 0x12345678
</code></pre>

<h3>首先导入修改Dex所需要的python库</h3>

<pre><code class="python">import os,sys
import zlib,hashlib
import struct
</code></pre>

<h3>Checksum</h3>

<p><code>Dex</code>文件头中的<code>checksum</code>是用来校验文件的完整性，使用<code>adler32</code>算法。在<code>python</code>中的<code>zlib</code>库中有该算法</p>

<pre><code class="python">def repairChecksum(self):
    self.seek(8)
    sourceData = self.read(4)
    self.seek(12)
    checkdata = self.read()
    checksum = zlib.adler32(checkdata)
    checkInt = checksum &amp; 0xffffffff
    bytes = struct.pack('i',checksum)
    print "头部原checksum:",sourceData
    print "计算checksum:",checkInt

    if bytes == sourceData:
        print 'checksum效验正常'
    else:
        print 'checksum效验异常'
        file_object.seek(8)
        file_object.write(bytes)
        #byte1 = struct.unpack('i',byte0)
        print 'checksum修复成功'
</code></pre>

<h3>Signature</h3>

<p><code>Dex</code>头中的<code>Signature</code>是对<code>dex</code>文件的签名，签名<code>signature</code>字段之后的数据（32字节之后），在<code>hashlib</code>中有该算法</p>

<pre><code class="python">def repairSignature(self):
    #4 + 4 + 4 + 20
    self.seek(12)
    sourceData = self.read(20)
    self.seek(32)
    sigdata = self.read()
    sha1 = hashlib.sha1()
    sha1.update(sigdata)
    sha0 = sha1.hexdigest()
    sha2 = sha1.digest()
    print "signature:",sha0
    print "现signature:",sha2
    print "原signature:",sourceData

    if sourceData == sha2:
        print 'SHA1效验正常'
    else:
        print 'SHA1效验异常
        for i in xrange(len(sha2)):    
            salt = sha2[i] 
            file_object.seek(i)
            bytes = struct.pack('c',salt)
            file_object.write(bytes)

        print 'SHA1效验修复成功'
</code></pre>

<p>我在方法中加入了效验跟修复功能，为了方便查看，使用010 Editor打开刚刚生成的Dex文件，在官网下载一个Dex模板的脚本，然后运行修改之后可以用此python做完整性效验修复&hellip;</p>

<h1>参考资料</h1>

<ul>
<li><a href="http://blog.csdn.net/feglass/article/details/51761902">http://blog.csdn.net/feglass/article/details/51761902</a></li>
<li><a href="http://www.sweetscape.com/010editor/repository/templates/file_info.php?file=DEX.bt">http://www.sweetscape.com/010editor/repository/templates/file_info.php?file=DEX.bt</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
